{"name":"Arcondicionado","tagline":"Exercício 2 de 8 da Lista de Padrões de Projeto","body":"### **Diagrama**\r\n\r\nDiagrama de CLasses do Padrão Observador Implementado\r\n\r\n![](https://github.com/izabely-furtado/ArCondicionado/blob/master/Diagramas/Class%20Diagram%20do%20Padr%C3%A3o%20Observador%20Implementado.png?raw=true)\r\n### **Explicação**\r\n\r\n**Interface pública Observer: **\r\n\r\nAs classes que implementarem essa interface, que por sua vez conterá um método de atualização (update), deverão ser notificadas quando da atualização ou mudança do estado do objeto observado.\r\n\r\n**Classe Observable: **\r\n\r\nDefine a classe que será observada. Essa classe geralmente guarda como atributo uma lista (Lista Java comum, Collections) dos observers associados à mesma, para que os mesmos possam ser notificados quando a mudança acontecer na classe.\r\n\r\n**Alguns métodos utilizados:**\r\n\r\n* registerObserver(Observer observer): Adiciona o observer passado por parâmetro à lista de observadores do objeto observado (Sensor);\r\n* deleteObserver(Observer observer): Remove o observer passado por parâmetro da lista de observadores do objeto observado (Sensor);\r\n* setNovaTemperatura(): Verifica se o objeto sofreu alguma mudança, no caso do Sensor verificando  se houve mudança na temperatura;\r\n* notifyObservers(): Notifica todos os observers caso haja alguma mudança no objeto observado.\r\n\r\nBasicamente as duas interfaces acima descritas no diagrama foram implementadas como indicado na descrição.\r\nSendo que a setNovaTempratura() está descrita no diagrama como é feita a verificação do sensor. \r\nAssim indicando o processo necessário para ouvir os eventos de mudança na temperatura e notificar os respectivos sensores que irão validar tal mudança.\r\n\r\nNas Linhas de código evidenciadas a seguir é possível observar o método de chamada, +inicializaControle(), do processo indicado acima.\r\n\r\n1.  public class ControlAr {     \r\n2.      public static void inicializaControle(int novaTemperatura){\r\n3.          //cria sensores\r\n4.          Sensor s1 = new Sensor();\r\n5.          Sensor s2 = new Sensor();\r\n6.          Sensor s3 = new Sensor();\r\n7.          //cria ar condicionado\r\n8.          ArCondicionado arCond = new ArCondicionado(); \r\n9.          //add sensores\r\n10.          arCond.registerObserver(s1); \r\n11.          arCond.registerObserver(s2); \r\n12.          arCond.registerObserver(s3); \r\n13.          //seta nova temparatura\r\n14.          arCond.setNovaTemp(novaTemperatura);\r\n15.      }\r\n16.  }\r\n\r\nÉ dado o processo de controle seguindo esta sequência:\r\n\r\n* é feita a criação dos 3 sensores, \r\n* se cria o ArCondicionado, \r\n* se adiciona os sensores ao arcondicionado\r\n* então se manipula a nova temperatura dada como entrada\r\n\r\n### **Motivação**\r\n\r\nEsse padrão é extremamente importante e útil devido aos seus inúmeros benefícios e boas práticas. \r\n\r\nEntre as boas práticas e princípios fundamentais que o padrão Observer nos proporciona temos, entre diversos outros: \r\n* a separação dos aspectos que variam na aplicação, \r\n* a programação para interface e não para uma implementação, \r\n* prioridade à composição em relação a herança, \r\n* interdependência entre os objetos. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}